<%= render "/shared/all_pages_nav" %>

<h1> Wordle </h1>

<div style="--primary-clr: <%= @aesthetic.colors[0]  %>; --font-clr: <%= @aesthetic.colors[4] %>; --font: <%= @aesthetic.font %>; --secondary-clr: <%= @aesthetic.colors[1] %>; --tertiary-clr: <%= @aesthetic.colors[2] %>;  --default-clr: <%= @aesthetic.colors[3] %>; ">

  <div id="htp-modal" class="htp" style="display: none; font-family: var(--font); color:black;">
    <div class="htp-content">
      <h2>How to play</h2>
      <ol>
        <li>Guess 5 letter words</li>
        <li>For every guess, the tile color changes to indicate correctness, each tile will be</li>
        <ul>
          <li style="color:var(--primary-clr);"> correct letter in the correct position</li>
          <li style="color:var(--secondary-clr);"> correct letter in the incorrect position</li>
          <li style="color:var(--tertiary-clr);"> incorrect letter</li>
        </ul>
        <li>You get 6 guesses</li>
      </ol>
      <button id="htp-play" class="btn btn-login">Play</button>
    </div>
  </div>
  
  <div class="user-options">
    <% if @current_user and SettingsService.role_exists?(@current_user, "Puzzle Aesthetician", Game.find_by(name: "Wordle")) %>
      <%= button_to edit_aesthetic_path(@aesthetic) , method: :get, class: "btn btn-login btn-edit", title:"Aesthetic Settings" do %><i class="fas fa-pencil-alt"></i><% end %>
    <% end%>
    <button id="htp-help" class="btn btn-login" title="How to Play">
      <i class="fas fa-question"></i>
    </button>
  </div>

  <% if @wordle.errors.any? %>
    <div class="error-messages">
      <% @wordle.errors.full_messages.each do |error| %>
        <p><%= error %></p>
      <% end %>
    </div>
  <% end %>

  <div class="definition">
    <% if session[:wordle_attempts] && session[:wordle_attempts] >= 4 && @definition != "Definition not found" %>
        <p>Looks like you are having a difficult time (here is a hint): <%= @definition %></p>
    <% end %>
  </div>

  <br />

  <div>
    <!-- Win or Loss Message -->
    <% if session[:game_status] == "won" %>
        <div class="win-message">
        <h2>Congratulations! You guessed the correct word!</h2>
        </div>
    <% elsif session[:game_status] == "lost" %>
        <div class="loss-message">
        <h2>You've exhausted all your chances! The correct word was: <%= @wordle.word %>.</h2>
        </div>
    <% end %>
    </div>


  <div id="game-container">

    <!-- Wordle Grid on the Left -->
    <div id="wordle-grid">
      <% 6.times do |row_idx| %>
        <div class="wordle-row">
          <% if session[:wordle_words_guessed] && session[:wordle_words_guessed][row_idx] %>
            <% word = session[:wordle_words_guessed][row_idx] %>
            <% result = check_word(word) %>
            <% word.chars.each_with_index do |letter, col_idx| %>
              <div class="wordle-tile" data-filled="true" style="background-color: 
                  <% if result[col_idx] == 'green' %>var(--primary-clr)
                  <% elsif result[col_idx] == 'yellow' %>var(--secondary-clr)
                  <% else %>var(--tertiary-clr)
                  <% end %>">
                <%= letter %>
              </div>
            <% end %>
          <% else %>
            <% 5.times do |col_idx| %>
              <div class="wordle-tile"></div>
            <% end %>
          <% end %>
        </div>
      <% end %>
    </div>

    <!-- Keyboard on the Right -->
    <div id="keyboard-container">
      <div id="keyboard">
        <% ['QWERTYUIOP', 'ASDFGHJKL', 'ZXCVBNM'].each do |row| %>
          <div class="keyboard-row">
            <% row.split('').each do |key| %>
              <button class="keyboard-key" data-key="<%= key %>"><%= key %></button>
            <% end %>
          </div>
        <% end %>
        
        <!-- Separate row for ENTER and BACKSPACE keys -->
        <div class="keyboard-row">
          <button class="keyboard-key wide-key" data-key="ENTER">ENTER</button>
          <button class="keyboard-key wide-key" data-key="BACKSPACE">âŒ«</button>
        </div>
      </div>
      <p>Number of Attempts: <%= session[:wordle_attempts] %></p>
    </div>
    

  </div>

  <br>

  <!-- Game Control Section -->
  <!-- 
  <div>
    <p>Attempts: <%= session[:wordle_attempts] %></p>

    <p>Used up letters: <%= (session[:wordle_alphabet_used] || []).to_a.join(", ") %></p>
    <p>Used up words: <%= (session[:wordle_words_guessed] || []).join(", ") %></p>
  </div>

  -->

  <!-- Hidden Form for Submitting Guess -->

  <% if session[:game_status] != "won" %>
    <%= form_with url: wordles_play_path, method: :get, local: true, id: "wordle-form" do %>
      <input type="hidden" name="guess" id="wordle-guess-input">
      <%= submit_tag "Submit Guess", class: "btn", style: "display: none;" %>
    <% end %>
  <% end %>

  <!-- Reset Game Session -->
  <!-- <%= button_to "Reset Game", wordles_play_path, method: :get, params: { reset: true }, class: "btn btn-danger" %> -->

  <!-- Go Back Button -->
  <%= link_to "Go Back", games_path, class: "btn btn-login" %>
</div>

<br>

<% if session[:spotify_playlist].present? %>
  <%= render "shared/spotify" %>
<% end %>

<script>
  document.addEventListener('DOMContentLoaded', function() {
      const keys = document.querySelectorAll('.keyboard-key');
      const form = document.getElementById('wordle-form');
      const input = document.getElementById('wordle-guess-input');
      let currentGuess = '';

      // On-screen keyboard click event
      keys.forEach(key => {
          key.addEventListener('click', (event) => {
              const keyPressed = event.target.getAttribute('data-key');
              handleKeyPress(keyPressed);
          });
      });

      // Physical keyboard keypress event
      document.addEventListener('keydown', (event) => {
          const keyPressed = event.key.toUpperCase();
          if (/^[A-Z]$/.test(keyPressed) || keyPressed === 'ENTER' || keyPressed === 'BACKSPACE') {
              handleKeyPress(keyPressed);
          }
      });

  function handleKeyPress(key) {
      if (key === 'ENTER') {
          if (currentGuess.length === 5) {
              input.value = currentGuess;
              form.submit(); // Programmatically submit the form
              currentGuess = ''; // Clear the current guess after submission
          }
      } else if (key === 'BACKSPACE') {
          currentGuess = currentGuess.slice(0, -1);
          updateDisplay();
      } else if (/^[A-Z]$/.test(key)) {
          if (currentGuess.length < 5) {
              currentGuess += key;
              updateDisplay();
          }
      }
  }


  function updateDisplay() {
      const guessedWordsCount = <%= session[:wordle_words_guessed].length %>; // Use session data to get the correct number of guesses
      console.log('Total Filled Rows:', guessedWordsCount);

      const nextRowIdx = guessedWordsCount;  // This will give the next empty row index
      console.log(nextRowIdx)
      console.log('Next Row Index (to be updated):', nextRowIdx + 1);

      // Get the next available row based on the guesses count
      const tiles = document.querySelectorAll(`.wordle-row:nth-child(${nextRowIdx + 1}) .wordle-tile`);

      console.log(tiles)

      // Clear only the next available row (based on guessedWordsCount)
      tiles.forEach(tile => {
          tile.textContent = ''; // Clear previous text
          tile.removeAttribute('data-filled'); // Remove filled status
      });

      // Update only the next row based on the current guess
      tiles.forEach((tile, index) => {
          if (currentGuess[index]) {
              console.log('Updating tile at row:', nextRowIdx + 1, 'column:', index);
              tile.textContent = currentGuess[index];
              tile.setAttribute('data-filled', 'true'); // Mark tile as filled
          }
      });
  }


      // Function to update the on-screen keyboard colors based on previous guesses
      function updateKeyboardColors(guessedWordsResults) {
          guessedWordsResults.forEach((resultObj) => {
              Object.entries(resultObj).forEach(([letter, color]) => {
                  const key = document.querySelector(`.keyboard-key[data-key="${letter.toUpperCase()}"]`);
                  if (key) {
                      // Apply the color only if it hasn't been set to a more favorable color yet
                      if (color === 'green') {
                          key.style.backgroundColor = 'var(--primary-clr)';
                      } else if (color === 'yellow' && key.style.backgroundColor !== 'var(--primary-clr)') {
                          key.style.backgroundColor = 'var(--secondary-clr)'; // Darker yellow
                      } else if (color === 'grey' && key.style.backgroundColor !== 'green' && key.style.backgroundColor !== 'var(--secondary-clr)') {
                          key.style.backgroundColor = 'var(--tertiary-clr)';
                      }
                  }
              });
          });
      }

      // Assuming you already have session data to get previous guesses and their results
      const guessedWords = <%= raw(session[:wordle_words_guessed].to_json) %>;
      const previousResults = guessedWords.map(guess => checkWordJS(guess));

      // Example to map results to the keyboard colors
      updateKeyboardColors(previousResults);

      // This function needs to mimic check_word helper in JS for keyboard color mapping
      function checkWordJS(guess) {
          const result = {};
          const correctWord = '<%= fetch_todays_word %>';
          
          for (let i = 0; i < 5; i++) {
              const letter = guess[i];
              if (correctWord[i] === letter) {
                  result[letter] = 'green'; // Correct position
              } else if (correctWord.includes(letter)) {
                  result[letter] = 'yellow'; // Wrong position
              } else {
                  result[letter] = 'grey'; // Not in the word
              }
          }
          return result;
      }
  });

  var modal = document.getElementById("htp-modal");
  var playbutton = document.getElementById("htp-play");
  var helpbutton = document.getElementById("htp-help");

  playbutton.onclick = function() {
      modal.style.display = "none";
  }

  window.onclick = function(event) {
      if (event.target == modal) {
          modal.style.display = "none";
      }
  }

  helpbutton.onclick = function() {
      modal.style.display = "flex";
  }
</script>

